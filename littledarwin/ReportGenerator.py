import os


class ReportGenerator(object):
    """ """

    def __init__(self, littleDarwinVersion=None):
        self.ldVersion = littleDarwinVersion

    def initiateDatabase(self, databasePath):
        """

        :param databasePath:
        :type databasePath:
        """

    def generateHTMLFinalReport(self, resultData, reportPath):
        """

        :param resultData:
        :type resultData: 0: file name, 1: survived count, 2: uncovered survived count, 3: killed by build command count, 4: killed by test command, 5: html file name
        :param reportPath:
        :type reportPath:
        :return:
        :rtype:
        """
        reportBeginning = """<!DOCTYPE html><html><head><title>LittleDarwin Mutation Coverage Report</title>
             <style type='text/css'> body { font-family: "Carlito", "Calibri", "Helvetica Neue", sans-serif; } 
             table { border-collapse: collapse; } th, td { text-align: left; padding: 1em; }
             th { background-color: #f0f0f0; color: black; } tr:hover { background-color: #b2daf5; } 
             a:link, a:visited { color: black; text-decoration: none; display: inline-block; } 
             a:hover, a:active { font-weight: bold; } .coverage_bar { display: inline-block; border-radius: 0.3em; 
             height: 1.1em; width: 9em; background: #ff8482; margin: 0 5px; vertical-align: middle; 
             border: 1px solid #888; position: relative } .coverage_complete { display: inline-block; 
             border-radius: 0.3em; height: 100%; background: #acff8b; float: left } 
             .coverage_legend { position: absolute; height: 100%; width: 100%; left: 0; top: 0; text-align: center }
             </style></head><body><h1>LittleDarwin Mutation Coverage Report</h1>
             <h2>Project Summary</h2><table><thead><tr><th>Number of Files</th>
             <th colspan=2>Mutation Coverage</th></tr> </thead> <tbody>"""

        reportMiddle = """</tbody></table><h2>Breakdown by File</h2><table><thead><tr><th>Name</th>
                          <th colspan=2 >Mutation Coverage</th></tr></thead><tbody>"""

        reportEnd = """</tbody></table><footer><p style="font-size: small">Report generated by LittleDarwin {} </p>
                       </footer></body></html>""".format(
            self.ldVersion
        )

        totalMutantCount = 0
        survivedMutantCount = 0
        breakdownFile = list()

        for mutationResult in resultData:
            survivedMutantCount += (mutationResult[1] + mutationResult[2])
            totalMutantCount += (
                mutationResult[1]
                + mutationResult[2]
                + mutationResult[3]
                + mutationResult[4]
            )
            div = float(
                mutationResult[1]
                + mutationResult[2]
                + mutationResult[3]
                + mutationResult[4]
            ) if float(
                mutationResult[1]
                + mutationResult[2]
                + mutationResult[3]
                + mutationResult[4]
            ) != 0.0 else 1.0
            breakdownFile.append(
                '<tr><td><a href="'
                + os.path.relpath(
                    mutationResult[5],
                    os.path.dirname(reportPath),
                )
                + '" >' +
                os.path.dirname(os.path.relpath(
                    mutationResult[5], os.path.dirname(reportPath)))
                + "</a></td> <td> "
                + (
                    "{:3.1f}%".format(
                        100
                        - (
                            float(mutationResult[1] + mutationResult[2])
                            / div
                            * 100
                        )
                    )
                )
                + ' </td> <td> <div class="coverage_bar"><div class="coverage_complete" style="width:'
                + (
                    "%d"
                    % (
                        100
                        - (
                            float(mutationResult[1] + mutationResult[2])
                            / div
                            * 100
                        )
                    )
                )
                + '%"></div><div class="coverage_legend">'
                + str(mutationResult[3] + mutationResult[4])
                + "/"
                + str(
                    mutationResult[1]
                    + mutationResult[2]
                    + mutationResult[3]
                    + mutationResult[4]
                )
                + "</div></div></td></tr>"
            )

        killedMutantCount = totalMutantCount - survivedMutantCount

        projectOverallStats = (
            "<tr><td>"
            + str(len(resultData))
            + " </td> <td> "
            + ("%3.1f" % (float(killedMutantCount) /
               (1 if totalMutantCount == 0 else totalMutantCount) * 100))
            + ' </td> <td> <div class="coverage_bar"><div class="coverage_complete" style="width:'
            + ("%d" % (float(killedMutantCount) /
               (1 if totalMutantCount == 0 else totalMutantCount) * 100))
            + '%"></div><div class="coverage_legend">'
            + str(killedMutantCount)
            + "/"
            + str(totalMutantCount)
            + "</div></div></td></tr>"
        )

        reportOutput = list()
        reportOutput.extend(
            [reportBeginning, projectOverallStats, reportMiddle])
        reportOutput.extend(breakdownFile)
        reportOutput.append(reportEnd)

        return "\n".join(reportOutput)

    def generateHTMLReportPerFile(
        self, filePath, reportPath, survived, killed, uncovered, buildFailed, testFailed, schemata: str = None
    ):
        """

        :param filePath:
        :type filePath:
        :param reportPath:
        :type reportPath:
        :param survived:
        :type survived:
        :param killed:
        :type killed:
        :return:
        :rtype:
        """

        def xstr(inputVar):
            """

            :param inputVar:
            :type inputVar:
            :return:
            :rtype:
            """
            if inputVar is None:
                return ""
            else:
                return str(inputVar)

        reportBeginning = """<!DOCTYPE html><html><head><title>LittleDarwin Mutation Coverage Report</title>
             <style type='text/css'> body { font-family: "Carlito", "Calibri", "Helvetica Neue", sans-serif; } 
             table { border-collapse: collapse; } th, td { text-align: left; padding: 1em; }
             th { background-color: #f0f0f0; color: black; } tr:hover { background-color: #b2daf5; } 
             a:link, a:visited { color: black; text-decoration: none; display: inline-block; } 
             a:hover, a:active { font-weight: bold; } .coverage_bar { display: inline-block; border-radius: 0.3em; 
             height: 1.1em; width: 9em; background: #ff8482; margin: 0 5px; vertical-align: middle; 
             border: 1px solid #888; position: relative } .coverage_complete { display: inline-block; 
             border-radius: 0.3em; height: 100%; background: #acff8b; float: left } 
             .coverage_legend { position: absolute; height: 100%; width: 100%; left: 0; top: 0; text-align: center }
             </style></head><body><h1>LittleDarwin Mutation Coverage Report</h1><h2>File Summary</h2><table><thead><tr>
             <th>Number of Mutants</th><th>Mutation Coverage</th></tr></thead><tbody>"""

        reportMiddle = (
            '<tr><td colspan=2 style="text-align:center"><a href="aggregate.html">Aggregate Report</a></td></tr></tbody></table><h2>Detailed List</h2><br><table><thead><tr><th>Survived Mutant ('
            + str(len(survived))
            + ")</th><th>Survived Mutant Output</th><th>Killed at build ("
            + str(len(buildFailed))
            + ")</th><th>killed at build output</th><th>Killed at test ("
            + str(len(testFailed))
            + ")</th><th>killed at test output</th><th>Uncovered Survived Mutant ("
            + str(len(uncovered))
            + ")</th><th>Uncovered Survived Output</th></tr></thead><tbody>"
        )

        reportEnd = (
            """</tbody></table><footer><p style="font-size: small">Report generated by LittleDarwin %s </p>
                               </footer></body></html>"""
            % self.ldVersion
        )

        output = list()
        joinedList = list()
        maxIndex = max(len(survived), len(buildFailed),
                       len(testFailed), len(uncovered))

        assert isinstance(survived, list)
        assert isinstance(buildFailed, list)
        assert isinstance(testFailed, list)
        assert isinstance(uncovered, list)

        for i in range(0, maxIndex):
            try:
                survivedItem = survived[i]
            except IndexError as e:
                survivedItem = None

            try:
                buildFailItem = buildFailed[i]
            except IndexError as e:
                buildFailItem = None

            try:
                testFailItem = testFailed[i]
            except IndexError as e:
                testFailItem = None

            try:
                uncoveredItem = uncovered[i]
            except IndexError as e:
                uncoveredItem = None

            joinedList.append(
                [
                    (
                        os.path.relpath(
                            os.path.join(os.path.dirname(
                                reportPath), survivedItem),
                            os.path.dirname(reportPath),
                        )
                        if survivedItem is not None
                        else None
                    ) if schemata is None
                    else schemata,
                    survivedItem,
                    (
                        os.path.relpath(
                            os.path.join(
                                os.path.dirname(reportPath),
                                os.path.splitext(survivedItem)[0] + ".txt",
                            ),
                            os.path.dirname(reportPath),
                        )
                        if survivedItem is not None
                        else None
                    ),
                    (
                        os.path.splitext(survivedItem)[0] + ".txt"
                        if survivedItem is not None
                        else None
                    ),
                    (
                        os.path.relpath(
                            os.path.join(os.path.dirname(
                                reportPath), buildFailItem),
                            os.path.dirname(reportPath),
                        )
                        if buildFailItem is not None
                        else None
                    )if schemata is None
                    else schemata,
                    buildFailItem,
                    (
                        os.path.relpath(
                            os.path.join(
                                os.path.dirname(reportPath),
                                os.path.splitext(buildFailItem)[0] + ".txt",
                            ),
                            os.path.dirname(reportPath),
                        )
                        if buildFailItem is not None
                        else None
                    ),
                    (
                        os.path.splitext(buildFailItem)[0] + ".txt"
                        if buildFailItem is not None
                        else None
                    ),
                    (
                        os.path.relpath(
                            os.path.join(os.path.dirname(
                                reportPath), testFailItem),
                            os.path.dirname(reportPath),
                        )
                        if testFailItem is not None
                        else None
                    )if schemata is None
                    else schemata,
                    testFailItem,
                    (
                        os.path.relpath(
                            os.path.join(
                                os.path.dirname(reportPath),
                                os.path.splitext(testFailItem)[0] + ".txt",
                            ),
                            os.path.dirname(reportPath),
                        )
                        if testFailItem is not None
                        else None
                    ),
                    (
                        os.path.splitext(testFailItem)[0] + ".txt"
                        if testFailItem is not None
                        else None
                    ),
                    (
                        os.path.relpath(
                            os.path.join(os.path.dirname(
                                reportPath), uncoveredItem),
                            os.path.dirname(reportPath),
                        )
                        if uncoveredItem is not None
                        else None
                    )if schemata is None
                    else schemata,
                    uncoveredItem,
                    (
                        os.path.relpath(
                            os.path.join(
                                os.path.dirname(reportPath),
                                os.path.splitext(uncoveredItem)[0] + ".txt",
                            ),
                            os.path.dirname(reportPath),
                        )
                        if uncoveredItem is not None
                        else None
                    ),
                    (
                        os.path.splitext(uncoveredItem)[0] + ".txt"
                        if uncoveredItem is not None
                        else None
                    ),
                ]
            )
        div = (float(len(survived) + len(killed) + len(uncovered))
               if float(len(survived) + len(killed) + len(uncovered)) != 0 else 1)
        fileOverallStats = "<tr><td>" + str(
            str(len(survived) + len(killed) + len(uncovered))
            + " </td> <td> "
            + (
                "{:3.1f}%".format(
                    float(len(killed))
                    / div
                    * 100
                )
            )
            + '  <div class="coverage_bar"><div class="coverage_complete" style="width:'
            + (
                "%d"
                % (
                    float(len(killed))
                    / div
                    * 100
                )
            )
            + '%"></div><div class="coverage_legend">'
            + str(len(killed))
            + "/"
            + str(len(killed) + len(survived) + len(uncovered))
            + "</div></div></td></tr>"
        )

        for item in joinedList:
            output.append(
                '<tr><td><a href="'
                + xstr(item[0])
                + '">'
                + xstr(item[1])
                + '</a></td> <td><a href="'
                + xstr(item[2])
                + '">'
                + xstr(item[3])
                + '</a></td><td><a href="'
                + xstr(item[4])
                + '">'
                + xstr(item[5])
                + '</a></td><td><a href="'
                + xstr(item[6])
                + '">'
                + xstr(item[7])
                + '</a></td><td><a href="'
                + xstr(item[8])
                + '">'
                + xstr(item[9])
                + '</a></td><td><a href="'
                + xstr(item[10])
                + '">'
                + xstr(item[11])
                + '</a></td><td><a href="'
                + xstr(item[12])
                + '">'
                + xstr(item[13])
                + '</a></td><td><a href="'
                + xstr(item[14])
                + '">'
                + xstr(item[15])
                + "</a></td></tr>"
            )

        reportOutput = list()
        reportOutput.extend([reportBeginning, fileOverallStats, reportMiddle])
        reportOutput.extend(output)
        reportOutput.append(reportEnd)

        return "\n".join(reportOutput)
