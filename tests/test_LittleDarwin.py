import os
import shutil
import sys
import unittest
import tempfile
import base64
import zipfile
from io import BytesIO

import LittleDarwin


class TestLittleDarwin(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.videostoreZipContentBase64 = b''
        cls.videostoreZipContent = BytesIO(
            base64.decodebytes(cls.videostoreZipContentBase64))

    def setUp(self) -> None:
        self.tempDir = tempfile.TemporaryDirectory()
        self.videoStoreSourcePath = os.path.join(
            self.tempDir.name, "videostore", "src", "main")
        self.videoStoreBuildPath = os.path.join(
            self.tempDir.name, "videostore")

        print("Created temp directory: " + str(self.tempDir.name) + ".")

        zipObj = zipfile.ZipFile(self.videostoreZipContent)
        zipObj.extractall(path=self.tempDir.name)
        print("Extracted \"VideoStore\" project.")

    def tearDown(self) -> None:
        try:
            with open(os.path.join(self.videoStoreBuildPath, "LittleDarwinResults", "initialbuild.txt"), 'r') as ib:
                for line in ib.readlines():
                    print(str(line))
        except Exception as e:
            pass

        self.tempDir.cleanup()
        print("Deleted temp directory.")

    def test_VideoStoreGenerateTraditionalMutants(self):
        argList = ['-m', '-p', self.videoStoreSourcePath,
                   '-t', self.videoStoreBuildPath]
        print("Running LittleDarwin with arguments:\n" + " ".join(argList))

        try:
            sys.exit(LittleDarwin.main(argList))

        except Exception as e:
            print(e)
            self.fail("Irregular exit: exception occured.")

        except SystemExit as e:
            self.assertEqual(int(e.code), 0)

    def test_VideoStoreGenerateSecondOrderMutants(self):
        argList = ['-m', '-p', self.videoStoreSourcePath, '-t', self.videoStoreBuildPath,
                   "--higher-order=2", "--timeout=600"]
        print("Running LittleDarwin with arguments:\n" + " ".join(argList))

        try:
            sys.exit(LittleDarwin.main(argList))
        except Exception as e:
            print(e)
            self.fail("Irregular exit: exception occured.")

        except SystemExit as e:
            self.assertEqual(int(e.code), 0)

    def test_VideoStoreTraditionalBuild(self):
        mavenPath = shutil.which("mvn")
        if mavenPath is None:
            mavenPath = shutil.which("mvn.bat")

        if mavenPath is None:
            mavenPath = shutil.which("mvn.cmd")

        self.assertIsNotNone(mavenPath)

        argList = ['-m', '-b', '-p', self.videoStoreSourcePath, '-t', self.videoStoreBuildPath, '-c',
                   str(mavenPath) + ",clean,test", "--timeout=600"]
        print("Running LittleDarwin with arguments:\n" + " ".join(argList))

        try:
            sys.exit(LittleDarwin.main(argList))

        except Exception as e:
            print(e)
            self.fail("Irregular exit: exception occured.")

        except SystemExit as e:
            self.assertEqual(int(e.code), 0)


if __name__ == '__main__':
    unittest.main()
